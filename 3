//задание 3, проверка связности графа

// ввести граф в формате списка смежных между собой вершин и проверить, является ли данный граф деревом
// визуализировать граф через что-нибудь

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

struct line //структура смежных вершин
{
    int node1; // вершина 1
    int node2; // вершина 2, смежная вершине 1
};

struct node //структура уникальных вершин
{
    int number;   // вершина
    bool visited; // была ли она посещена (нужно при обходе в глубину при проверки графа на связность)
};

int length = 0, uniq_count = 0;

FILE *openfile(const char *filename)
{
    FILE *file = fopen(filename, "r");
    if (file == NULL)
    {
        printf("Foner read error!\n");
        exit(1);
    }
    return file;
}

// считывание количества строк в прикреплённом файлике
size_t get_length(FILE *file)
{
    size_t size = 0;
    while (!feof(file))
    {
        if (fgetc(file) == '\n')
            size++;
    }
    size++;
    fseek(file, 0, 0);
    return size;
}

//заполнение массива структуры смежных вершин чиселками из прикреплённого файлика
void get_lines(struct line *lines, FILE *file)
{
    for (int l = 0; fscanf(file, "%d--%d", &(lines[l].node1), &(lines[l].node2)) != EOF; ++l);
}


//заполнение массива структур уникальных вершин
int get_uniq_node(int size, struct line *lines, struct node *nodes)
{
    int j, uniques = 0; // с - количество уникальных вершин, т.е. длина массива структур уникальных вершин
    for (int i = 0; i < size; i++)
    {
        for (j = 0; j < uniques; j++)
        {
            if (lines[i].node1 == nodes[j].number)
                break;
        }
        if (j == uniques)
        {
            nodes[uniques].number = lines[i].node1;
            nodes[uniques].visited = 0;
            uniques++;
        }
    }
    for (int i = 0; i < size; i++)
    {
        for (j = 0; j < uniques; j++)
        {
            if (lines[i].node2 == nodes[j].number)
                break;
        }
        if ((j == uniques) && (lines[i].node2 != 0))
        {
            nodes[uniques].number = lines[i].node2;
            nodes[uniques].visited = 0;
            uniques++;
        }
    }
    return uniques;
}

//проверка на связность графа методом dfs
//поиск номера символа в массиве уникальных вершин по его значению
int return_index(struct node *nodes, int node)
{
    int i = 0;
    for (i = 0; i < uniq_count; i++)
        if (nodes[i].number == node)
        {
            return i;
        }
}

//поиск в глубину
void DFS(struct line *lines, struct node *nodes, int node) // node передаём как 0 чтобы начать рассматривать массив с нулевого элемента
{
    int next_n;
    nodes[node].visited = 1; //обозначаем вершину как посещенную
    // printf("Node %d marked visited\n",nodes[node].number);
    for (int i = 0; i < length; i++)
    {
        if (lines[i].node1 == nodes[node].number)
        {
            // printf("Node %d marked connected\n",lines[i].node2);
            next_n = return_index(nodes, lines[i].node2); //следующая вершина - смежная с только что помеченной
            if (nodes[next_n].visited == 0)               //если следующая еще не помеченна
                DFS(lines, nodes, next_n);                //вызываем рекурсию, обозначив номер следующей как вершину, с которой мы рассматриваем цикл
        }
        else if (lines[i].node2 == nodes[node].number)
        {
            // printf("Node %d marked connected\n",lines[i].node2);
            next_n = return_index(nodes, lines[i].node1); //следующая вершина - смежная с только что помеченной
            if (nodes[next_n].visited == 0)               //если следующая еще не помеченна
                DFS(lines, nodes, next_n);                //вызываем рекурсию, обозначив номер следующей как вершину, с которой мы рассматриваем цикл
        }
    }
}

//по тому же принципу делаем проверку на наличие циклов
bool DFS1(struct line *lines, struct node *nodes, int node) // node передаём как 0 чтобы начать рассматривать массив с нулевого элемента
{
    int next_n = 0;
    nodes[node].visited = 1; //обозначаем вершину как посещенную
    // printf("Node %d marked visited\n",nodes[node].number);
    for (int i = 0; i < length; i++)
    {
        if (lines[i].node1 == nodes[node].number)
        {
            // printf("Node %d marked connected\n",lines[i].node2);
            next_n = return_index(nodes, lines[i].node2); //следующая вершина - смежная с только что помеченной
            if (!nodes[next_n].visited)                   //если следующая еще не помеченна
                DFS1(lines, nodes, next_n);               //вызываем рекурсию, обозначив номер следующей как вершину, с которой мы рассматриваем цикл
            else if (nodes[next_n].visited)
                return true;
        }
        else if (lines[i].node2 == nodes[node].number)
        {
            // printf("Node %d marked connected\n",lines[i].node2);
            next_n = return_index(nodes, lines[i].node1); //следующая вершина - смежная с только что помеченной
            if (!nodes[next_n].visited)                   //если следующая еще не помеченна
                DFS1(lines, nodes, next_n);               //вызываем рекурсию, обозначив номер следующей как вершину, с которой мы рассматриваем цикл
            else if (nodes[next_n].visited)
                return true;
        }
    }
    return false;
}

int main(){
    const char filename[] = "graph";
    FILE *file = openfile(filename);
    length = get_length(file);
    printf("%d\n", length);

    struct line list_lines[length]; // создаем массив структур с длинной равной количеству строк в файле
    get_lines(list_lines, file);    // заполняем его
    fclose(file);
    //   вывод для проверки
    printf("Тhis graph was read from the file '%s' \n", filename);
    for (int i = 0; i < length; i++)
    {
        printf("%d--%d\n", list_lines[i].node1, list_lines[i].node2);
    }



        // создаём массив структур уникальных вершин
        struct node uniq_nodes[2 * length];                         // длиной 2n т.к. это максимально возможная длина если все вершины разные
        uniq_count = get_uniq_node(length, list_lines, uniq_nodes); //заполняем его
        //выводим его
        puts("Unique vertices of this graph");
        for (int i = 0; i < uniq_count; i++)
        {
            printf("%d ", uniq_nodes[i].number);
        }
        putchar('\n');

        //проверка на связность
        DFS(list_lines, uniq_nodes, 0);
        bool is_connected = true;

    //визуализация

    //создадим и заполним файл Dotfile.txt
    // create_dot_file("graph", "Dotfile.gv");
    system("dot -Tpng Dotfile.gv -o Dotfile.png");
    return 0;
}
